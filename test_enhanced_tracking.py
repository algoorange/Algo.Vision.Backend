"""
Test script for enhanced object tracking capabilities
Demonstrates trajectory tracking, movement analysis, and anomaly detection
"""

import cv2
import numpy as np
from app.services import object_detector, object_tracker
from app.utils.tracking_analytics import TrackingAnalyzer, generate_tracking_report
import json

def test_tracking_with_synthetic_data():
    """Test tracking with synthetic detection data"""
    print("üß™ Testing Enhanced Object Tracking")
    print("=" * 50)
    
    # Simulate multiple frames of detections
    synthetic_frames = [
        # Frame 1: Car appears
        {
            "detections": [
                {"bbox": [100, 200, 50, 30], "label": "car", "confidence": 0.85}
            ]
        },
        # Frame 2: Car moves right
        {
            "detections": [
                {"bbox": [120, 200, 50, 30], "label": "car", "confidence": 0.87}
            ]
        },
        # Frame 3: Car continues moving, person appears
        {
            "detections": [
                {"bbox": [140, 200, 50, 30], "label": "car", "confidence": 0.88},
                {"bbox": [50, 300, 20, 40], "label": "person", "confidence": 0.92}
            ]
        },
        # Frame 4: Both objects move
        {
            "detections": [
                {"bbox": [160, 200, 50, 30], "label": "car", "confidence": 0.86},
                {"bbox": [55, 295, 20, 40], "label": "person", "confidence": 0.90}
            ]
        },
        # Frame 5: Car moves significantly faster (potential anomaly)
        {
            "detections": [
                {"bbox": [220, 200, 50, 30], "label": "car", "confidence": 0.84},
                {"bbox": [60, 290, 20, 40], "label": "person", "confidence": 0.89}
            ]
        }
    ]
    
    # Create a dummy frame for tracking
    dummy_frame = np.zeros((480, 640, 3), dtype=np.uint8)
    
    all_tracks = []
    print("Processing synthetic frames...")
    
    for i, frame_data in enumerate(synthetic_frames):
        print(f"\nFrame {i+1}:")
        tracks = object_tracker.track_objects(dummy_frame, frame_data["detections"])
        
        print(f"  Detected {len(tracks)} tracks:")
        for track in tracks:
            print(f"    Track {track['track_id']}: {track['object_type']} at {track['center']}")
            print(f"      Velocity: {track['velocity']}")
            print(f"      Stationary: {track['is_stationary']}")
            print(f"      Time visible: {track['time_visible']} frames")
        
        all_tracks.extend(tracks)
    
    # Analyze movement patterns
    print("\nüîç MOVEMENT ANALYSIS")
    print("=" * 30)
    
    # Group tracks by ID for analysis
    tracks_by_id = {}
    for track in all_tracks:
        tid = track['track_id']
        if tid not in tracks_by_id:
            tracks_by_id[tid] = {
                'track_id': tid,
                'label': track['object_type'],
                'trajectory': [],
                'movement_data': {
                    'total_distance': 0.0,
                    'max_speed': 0.0,
                    'avg_speed': 0.0,
                    'stationary_frames': 0,
                    'moving_frames': 0,
                    'directions': []
                }
            }
        
        # Add trajectory point
        tracks_by_id[tid]['trajectory'].append(track['center'])
        
        # Update movement data
        movement_data = tracks_by_id[tid]['movement_data']
        movement_data['max_speed'] = max(movement_data['max_speed'], track['velocity']['speed'])
        movement_data['directions'].append(track['velocity']['direction'])
        
        if track['is_stationary']:
            movement_data['stationary_frames'] += 1
        else:
            movement_data['moving_frames'] += 1
    
    # Calculate total distances
    for track_data in tracks_by_id.values():
        trajectory = track_data['trajectory']
        if len(trajectory) > 1:
            total_distance = 0
            for i in range(1, len(trajectory)):
                p1, p2 = trajectory[i-1], trajectory[i]
                distance = ((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)**0.5
                total_distance += distance
            
            track_data['movement_data']['total_distance'] = total_distance
            track_data['movement_data']['avg_speed'] = total_distance / len(trajectory)
    
    tracks_list = list(tracks_by_id.values())
    
    # Run advanced analytics
    analyzer = TrackingAnalyzer()
    analysis = analyzer.analyze_track_movements(tracks_list)
    
    print("\nüìä ANALYTICS RESULTS")
    print("=" * 30)
    print(f"Traffic Flow: {json.dumps(analysis['traffic_flow'], indent=2)}")
    print(f"\nSpeed Analysis: {json.dumps(analysis['speed_analysis'], indent=2)}")
    print(f"\nDirection Patterns: {json.dumps(analysis['direction_patterns'], indent=2)}")
    
    if analysis['anomalies']:
        print(f"\n‚ö†Ô∏è ANOMALIES DETECTED ({len(analysis['anomalies'])}):")
        for anomaly in analysis['anomalies']:
            print(f"  - {anomaly['type']}: {anomaly['description']}")
    else:
        print("\n‚úÖ No anomalies detected")
    
    if analysis['object_interactions']:
        print(f"\nü§ù INTERACTIONS DETECTED ({len(analysis['object_interactions'])}):")
        for interaction in analysis['object_interactions']:
            print(f"  - {interaction['type1']} (ID {interaction['track1']}) "
                  f"and {interaction['type2']} (ID {interaction['track2']})")
            print(f"    Min distance: {interaction['min_distance']:.1f}")
            print(f"    Interaction type: {interaction['interaction_type']}")
    else:
        print("\n‚û°Ô∏è No significant interactions detected")
    
    # Generate comprehensive report
    print("\nüìã COMPREHENSIVE REPORT")
    print("=" * 30)
    report = generate_tracking_report(tracks_list)
    print(report)
    
    return analysis

def test_real_video_tracking(video_path=None):
    """Test tracking on a real video file (if available)"""
    if not video_path:
        print("\nüìπ Real video tracking test skipped (no video path provided)")
        return
    
    print(f"\nüìπ Testing with real video: {video_path}")
    
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print(f"‚ùå Could not open video: {video_path}")
        return
    
    frame_count = 0
    max_frames = 50  # Limit for testing
    
    while frame_count < max_frames:
        ret, frame = cap.read()
        if not ret:
            break
        
        # Run detection and tracking
        detections, _ = object_detector.detect_objects(frame)
        tracks = object_tracker.track_objects(frame, detections)
        
        if tracks:
            print(f"Frame {frame_count}: {len(tracks)} tracked objects")
            for track in tracks:
                print(f"  ID {track['track_id']}: {track['object_type']} "
                      f"speed={track['velocity']['speed']:.1f}")
        
        frame_count += 1
    
    cap.release()
    print(f"‚úÖ Processed {frame_count} frames")

def test_tracking_performance():
    """Test tracking performance and memory usage"""
    print("\n‚ö° PERFORMANCE TEST")
    print("=" * 20)
    
    # Get current tracking statistics
    stats = object_tracker.get_track_statistics()
    print(f"Current tracking stats: {stats}")
    
    # Simulate heavy tracking load
    dummy_frame = np.zeros((480, 640, 3), dtype=np.uint8)
    
    import time
    start_time = time.time()
    
    for i in range(100):
        # Simulate detections with multiple objects
        detections = [
            {"bbox": [100 + i, 200, 50, 30], "label": "car", "confidence": 0.85},
            {"bbox": [200 + i, 150, 30, 60], "label": "person", "confidence": 0.90},
            {"bbox": [300 + i, 250, 40, 25], "label": "bicycle", "confidence": 0.75}
        ]
        
        tracks = object_tracker.track_objects(dummy_frame, detections)
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    print(f"Processed 100 frames in {processing_time:.2f} seconds")
    print(f"Average FPS: {100/processing_time:.1f}")
    
    # Final stats
    final_stats = object_tracker.get_track_statistics()
    print(f"Final tracking stats: {final_stats}")

if __name__ == "__main__":
    print("üöÄ ENHANCED OBJECT TRACKING TEST SUITE")
    print("=" * 50)
    
    try:
        # Test 1: Synthetic data
        analysis = test_tracking_with_synthetic_data()
        
        # Test 2: Performance test
        test_tracking_performance()
        
        # Test 3: Real video (optional)
        # test_real_video_tracking("path/to/your/video.mp4")
        
        print("\n‚úÖ All tests completed successfully!")
        print("\nüéØ TRACKING CAPABILITIES VERIFIED:")
        print("  ‚úì Multi-object tracking with persistent IDs")
        print("  ‚úì Trajectory recording and analysis")
        print("  ‚úì Velocity and movement calculation")
        print("  ‚úì Anomaly detection")
        print("  ‚úì Object interaction detection")
        print("  ‚úì Comprehensive analytics and reporting")
        
    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc() 